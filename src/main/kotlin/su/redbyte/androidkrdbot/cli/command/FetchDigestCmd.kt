package su.redbyte.androidkrdbot.cli.command

import kotlinx.coroutines.CoroutineScope
import su.redbyte.androidkrdbot.domain.usecase.FetchDigestUseCase
import su.redbyte.androidkrdbot.infra.schedulers.DailyTaskScheduler

@RequireAdmin
class FetchDigestCmd(
    private val scope: CoroutineScope,
    private val fetchDigest: FetchDigestUseCase
) : BotCommand {

    override val name: String = Commands.DIGEST.commandName

    private var dailyTaskScheduler: DailyTaskScheduler? = null

    override suspend fun handle(ctx: CommandContext) {
        if (ctx.args.isEmpty()) {
            ctx.reply(buildHelpText())
            return
        }

        when (ctx.args.firstOrNull()?.lowercase()) {
            "start" -> {
                val (hour, minute) = parseTimeArgs(ctx.args.drop(1)) ?: (9 to 30)

                if (dailyTaskScheduler?.isRunning == true) {
                    ctx.reply("–î–∞–π–¥–∂–µ—Å—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ $hour:$minute")
                    return
                }

                dailyTaskScheduler = DailyTaskScheduler(
                    scope = scope,
                    fetchDigest = fetchDigest,
                    bot = ctx.bot,
                    chatId = ctx.chatId,
                    hour = hour,
                    minute = minute
                ).also { it.start() }

                ctx.reply("–î–∞–π–¥–∂–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω. –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: %02d:%02d".format(hour, minute))
            }

            "stop" -> {
                if (dailyTaskScheduler?.isRunning == true) {
                    dailyTaskScheduler?.stop()
                    ctx.reply("–î–∞–π–¥–∂–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                } else {
                    ctx.reply("–î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")
                }
            }

            "time" -> {
                val (hour, minute) = parseTimeArgs(ctx.args.drop(1)) ?: run {
                    ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /digest time HH mm")
                    return
                }

                if (dailyTaskScheduler != null) {
                    dailyTaskScheduler?.changeTime(hour, minute)
                    ctx.reply("–í—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ %02d:%02d".format(hour, minute))
                } else {
                    ctx.reply("–î–∞–π–¥–∂–µ—Å—Ç –µ—â—ë –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /digest start")
                }
            }

            "status" -> {
                if (dailyTaskScheduler?.isRunning == true) {
                    ctx.reply(
                        "–î–∞–π–¥–∂–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω. –í—Ä–µ–º—è: %02d:%02d".format(
                            dailyTaskScheduler!!.hour,
                            dailyTaskScheduler!!.minute
                        )
                    )
                } else {
                    ctx.reply("–î–∞–π–¥–∂–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                }
            }
            "help" -> {
                ctx.reply(buildHelpText())
            }
            else -> {
                ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /digest help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
            }
        }
    }
    private fun buildHelpText(): String {
        return """
        üì° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –¥–∞–π–¥–∂–µ—Å—Ç–æ–º:
        
        /digest start [HH mm] ‚Äì –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ 09:30)
        /digest stop ‚Äì –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–∞
        /digest time HH mm ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏
        /digest status ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        /digest help ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
        
        –ü—Ä–∏–º–µ—Ä: /digest start 10 15
    """.trimIndent()
    }

    private fun parseTimeArgs(args: List<String>): Pair<Int, Int>? {
        if (args.size < 2) return null
        val hour = args[0].toIntOrNull() ?: return null
        val minute = args[1].toIntOrNull() ?: return null
        if (hour !in 0..23 || minute !in 0..59) return null
        return hour to minute
    }
}
