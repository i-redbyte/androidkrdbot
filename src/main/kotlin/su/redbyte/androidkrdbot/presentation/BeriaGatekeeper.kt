package su.redbyte.androidkrdbot.presentation

import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.dispatcher.message
import com.github.kotlintelegrambot.entities.ChatId
import io.github.cdimascio.dotenv.dotenv
import su.redbyte.androidkrdbot.data.repository.ChatAdminRepository
import su.redbyte.androidkrdbot.data.repository.QuestionRepository
import su.redbyte.androidkrdbot.data.repository.VerificationRepository
import su.redbyte.androidkrdbot.domain.VerificationState
import su.redbyte.androidkrdbot.domain.factory.QuestionFactory
import su.redbyte.androidkrdbot.domain.model.BotCommands
import su.redbyte.androidkrdbot.domain.usecase.CheckAdminRightsUseCase
import su.redbyte.androidkrdbot.domain.usecase.CheckAnswerUseCase
import su.redbyte.androidkrdbot.domain.usecase.GetRandomQuestionUseCase
import su.redbyte.androidkrdbot.domain.usecase.ScheduleVerificationUseCase

fun startBeriaGatekeeper() {
    val dotenv = dotenv()
    val token = dotenv["TELEGRAM_BOT_TOKEN"] ?: error("TELEGRAM_BOT_TOKEN is not set")

    val questionRepo = QuestionRepository()
    val verificationRepo = VerificationRepository()
    val getQuestion = GetRandomQuestionUseCase(questionRepo)
    val scheduleVerification = ScheduleVerificationUseCase(verificationRepo)
    val checkAnswer = CheckAnswerUseCase(verificationRepo)
    val adminRepo = ChatAdminRepository()
    val checkAdminRights = CheckAdminRightsUseCase(adminRepo)

    val bot = bot {
        this.token = token

        dispatch {
            command(BotCommands.START_VERIFICATION.commandName) {
                VerificationState.enabled = true
                bot.sendMessage(
                    ChatId.fromId(message.chat.id), """
                        üü• –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.
                        –¢–æ–≤–∞—Ä–∏—â –ë–µ—Ä–∏—è –ª–∏—á–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–∏—á–∫–æ–≤.
                        –ö–∞–∂–¥—ã–π –≤—Ö–æ–¥—è—â–∏–π –±—É–¥–µ—Ç –¥–æ–ø—Ä–æ—à–µ–Ω. –û—Ç–≤–µ—Ç—ã ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã.
                    """.trimIndent()
                )
            }

            command(BotCommands.STOP_VERIFICATION.commandName) {
                val rawChatId = message.chat.id
                val chatId = ChatId.fromId(rawChatId)
                val fromId = message.from?.id ?: return@command

                if (!checkAdminRights(bot, rawChatId, fromId)) {
                    bot.sendMessage(
                        chatId,
                        "üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å –ø—Ä–∏–∫–∞–∑—ã —Ç–æ–≤–∞—Ä–∏—â—É –ë–µ—Ä–∏–∏. –í–∞—à–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –¥–æ—Å—å–µ."
                    )
                    return@command
                }

                VerificationState.enabled = false
                bot.sendMessage(
                    chatId, """
                        üü° –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.
                        –¢–æ–≤–∞—Ä–∏—â –ë–µ—Ä–∏—è —É–±—Ä–∞–ª –±–ª–æ–∫–Ω–æ—Ç, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–æ–≥–ª—è–¥—ã–≤–∞—Ç—å –æ–¥–Ω–∏–º –≥–ª–∞–∑–æ–º.
                        –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º.
                    """.trimIndent()
                )
            }

            command(BotCommands.VERIFICATION_STATUS.commandName) {
                val status = if (VerificationState.enabled)
                    "üü• –ê–∫—Ç–∏–≤–µ–Ω ‚Äî –ë–µ—Ä–∏—è —Å–ª–µ–¥–∏—Ç –ª–∏—á–Ω–æ üëÅÔ∏è"
                else
                    "üü° –ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚Äî –ë–µ—Ä–∏—è –≤—ã–∂–∏–¥–∞–µ—Ç üï∂Ô∏è"

                bot.sendMessage(
                    ChatId.fromId(message.chat.id),
                    "üìã –°—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: $status"
                )
            }

            command(BotCommands.RELOAD_QUESTIONS.commandName) {
                val chatId = ChatId.fromId(message.chat.id)
                val userId = message.from?.id ?: return@command

                if (!checkAdminRights(bot, chatId.id, userId)) {
                    bot.sendMessage(
                        chatId,
                        "üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –≤–º–µ—à–∏–≤–∞—Ç—å—Å—è –≤ –∞—Ä—Å–µ–Ω–∞–ª —Ç–æ–≤–∞—Ä–∏—â–∞ –ë–µ—Ä–∏–∏."
                    )
                    return@command
                }

                val success = QuestionFactory.reload()
                if (success) {
                    bot.sendMessage(chatId, "‚úÖ –í–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã. –¢–æ–≤–∞—Ä–∏—â –ë–µ—Ä–∏—è –ø—Ä–∏–Ω—è–ª –Ω–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã.")
                } else {
                    bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                }
            }

            message {
                val newMembers = message.newChatMembers
                if (newMembers != null) {
                    val chatId = ChatId.fromId(message.chat.id)
                    println("üë§ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: ${newMembers.joinToString { "${it.firstName} (${it.id})" }}")
                    println("üõ° –°—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${VerificationState.enabled}")

                    if (VerificationState.enabled) {
                        newMembers.forEach { user ->
                            val question = getQuestion()
                            val introText = "–ü—Ä–∏–≤–µ—Ç, ${user.firstName}! –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n${question.text}"

                            bot.sendMessage(chatId, introText) // ‚úÖ —Ç–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ

                            println("üì® –í–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω ${user.firstName} (${user.id}) –≤ —á–∞—Ç–µ ${chatId}")
                            scheduleVerification(user, chatId, question, bot)
                        }
                    } else {
                        println("‚ö†Ô∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è.")
                    }
                }
            }

            message {
                val userId = message.from?.id ?: return@message
                val answer = message.text ?: return@message
                checkAnswer(userId, answer, bot)
            }
        }
    }

    println("üïµÔ∏è –¢–æ–≤–∞—Ä–∏—â –ë–µ—Ä–∏—è –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —Ä–∞–±–æ—Ç–µ.")

    Runtime.getRuntime().addShutdownHook(Thread {
        println("üõë –¢–æ–≤–∞—Ä–∏—â –ë–µ—Ä–∏—è –∑–∞–∫–æ–Ω—á–∏–ª –≤–µ—Å—Ç–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.")
    })

    bot.startPolling()
}
